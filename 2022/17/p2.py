import sys
from pathlib import Path

sys.path.append(str(Path(__file__).parent.parent.parent))

from aoclib.input import *
from itertools import cycle

rocks: list[tuple[tuple[int, int], ...]] = [
    ((2, 0), (3, 0), (4, 0), (5, 0)),
    ((2, 1), (3, 0), (3, 1), (3, 2), (4, 1)),
    ((2, 0), (3, 0), (4, 0), (4, 1), (4, 2)),
    ((2, 0), (2, 1), (2, 2), (2, 3)),
    ((2, 0), (2, 1), (3, 0), (3, 1))
]

g = [["."] * 7 for _ in range(100000)]
def move_rock(rock, direction):
    if direction == 'v':
        for x, y in rock:
            if y-1 < 0:
                raise ValueError
            if g[y-1][x] != ".":
                raise ValueError
        
        return tuple((x, y-1) for x, y in rock)
    elif direction == '>':
        for x, y in rock:
            if g[y][x+1] != ".":
                raise IndexError

        return tuple((x+1, y) for x, y in rock) 
    elif direction == '<':
        for x, y in rock:
            if x-1 < 0:
                raise IndexError
            if g[y][x-1] != ".":
                raise IndexError
            
        return tuple((x-1, y) for x, y in rock)
    else:
        raise KeyError


wind_index = -1
max_height = 0

height_diffs = []
prev_heights = [max_height]

for i, rock in enumerate(cycle(rocks)):
    if i == 10000:
        break

    rock = tuple((x, y + max_height+3) for x, y in rock)

    try:
        while True:
            try:
                wind_index += 1
                rock = move_rock(rock, input_string[wind_index % len(input_string)])
            except IndexError:
                pass
            rock = move_rock(rock, 'v')
    except ValueError:
        pass

    for x, y in rock:
        if y + 1 > max_height:
            max_height = y + 1

    height_diffs.append(max_height - prev_heights[-1])
    prev_heights.append(max_height)

    for x, y in rock:
        g[y][x] = "O"


# use highlighting/ctrl-f to find a repeating sequence
print(''.join(map(str, height_diffs)))

# bits leading up to the cycle
A = '13200122221322212132133201232212120023001304213210130400221012300132400012012130033001222013302133401334213300133400032002202132400200202302022201232213200132001334010130132401212012120021200230013222132101320013300123001330013020133020224212132023021302213340003001224012120132'
# cycle


G = 1000000000000
cycle_count, final_index = divmod(G - len(A), len(B))

print(sum(map(int, A)) + cycle_count * sum(map(int, B)) + sum(map(int, B[:final_index])))
